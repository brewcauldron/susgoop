{"version":3,"sources":["Product.tsx","Results.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Product","onChangeGoodness","onChangeTitle","onChangeIngredients","good","title","ingredients","className","type","checked","onChange","e","value","target","autoFocus","placeholder","EmptyProduct","Results","products","goods","bads","product","split","ingredient","toLowerCase","trim","prev","push","badIngredients","length","map","i","savedState","saved","localStorage","getItem","JSON","parse","loadState","App","React","useState","setProducts","idx","next","saveState","p","state","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb61d159.chunk.js","sourcesContent":["import React from 'react'\nimport './Product.css'\n\nexport type Product = {good: boolean, title: string, ingredients: string}\n\nexport type Props = Product & {\n  onChangeGoodness: (goodness: boolean) => void\n  onChangeTitle: (title: string) => void\n  onChangeIngredients: (ingredients: string) => void\n}\n\n// eslint-disable-next-line\nexport function Product({onChangeGoodness, onChangeTitle, onChangeIngredients, good, title, ingredients}: Props) {\n  return (\n    <div key=\"Product\" className=\"row padding\">\n      <input key=\"Good\" className=\"margin\" type={\"checkbox\"} checked={good} onChange={e => onChangeGoodness(!good)} />\n      <input key=\"Name\" className=\"right-margin subtitle\" value={title} onChange={e => onChangeTitle(e.target.value)} autoFocus={false} placeholder={\"Product name\"} />\n      <input key=\"Ingredients\" className=\"grow body\" value={ingredients} onChange={e => onChangeIngredients(e.target.value)} autoFocus={false} placeholder={\"Enter the ingredients separated by commas\"} />\n    </div>\n  )\n}\n\nexport const EmptyProduct: Product = {\n  good: false,\n  title: '',\n  ingredients: ''\n}\n","import React from 'react'\nimport {Product} from './Product'\nimport './Results.css'\n\nexport type Props = {\n  products: Product[]\n}\n\nexport function Results({products}: Props) {\n  const goods: {[ingredient: string]: Product[]} = {}\n  const bads: {[ingredient: string]: Product[]} = {}\n  for (const product of products) {\n    const ingredients = product.ingredients.split(',')\n    for (const ingredientUnsanitized of ingredients) {\n      const ingredient = ingredientUnsanitized.toLowerCase().trim()\n      if (product.good) {\n        const prev = goods[ingredient]\n        if (prev) {\n          prev.push(product)\n        } else  {\n          goods[ingredient] = [product]\n        }\n      } else {\n        const prev = bads[ingredient]\n        if (prev) {\n          prev.push(product)\n        } else  {\n          bads[ingredient] = [product]\n        }\n      }\n    }\n  }\n\n  const badIngredients: string[] = []\n  for (const ingredient in bads) {\n    if (!goods[ingredient]) {\n      badIngredients.push(ingredient)\n    }\n  }\n\n  return <>\n    <div key=\"title\" className=\"ResultsTitle\">{badIngredients.length} Sus Ingredients:</div>\n    {badIngredients.map(i => <div className=\"ResultsIngredient\" key={i}>{i}</div>)}\n  </>\n}","import React from 'react'\nimport './App.css'\nimport {Product, EmptyProduct} from './Product'\nimport {Results} from './Results'\n\nconst savedState = loadState()\n\nfunction App() {\n  const [products, setProducts] = React.useState(savedState)\n\n  const onChangeGoodness = (idx: number) => {\n    return (good: boolean) => {\n      const next = [...products]\n      next[idx] = {\n        ...products[idx] ?? EmptyProduct,\n        good\n      }\n      setProducts(next)\n      saveState(next)\n    }\n  }\n\n  const onChangeTitle = (idx: number) => {\n    return (title: string) => {\n      const next = [...products]\n      next[idx] = {\n        ...products[idx] ?? EmptyProduct,\n        title\n      }\n      setProducts(next)\n      saveState(next)\n    }\n  }\n\n  const onChangeIngredients = (idx: number) => {\n    return (ingredients: string) => {\n      const next = [...products]\n      next[idx] = {\n        ...products[idx] ?? EmptyProduct,\n        ingredients\n      }\n      setProducts(next)\n      saveState(next)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <div className=\"app-name hero left\">Which skincare ingredients may I be sensitive to?</div>\n        <span className=\"left top subtitle align-start\">Products Iâ€™ve had issues with:</span>\n        <div className=\"padding column\">\n          {products.map((p, i) => (\n            <Product\n              key={i}\n              {...p}\n              onChangeGoodness={onChangeGoodness(i)}\n              onChangeTitle={onChangeTitle(i)}\n              onChangeIngredients={onChangeIngredients(i)}\n            />\n          ))}\n          <Product\n            key={products.length}\n            good={false}\n            title={\"\"}\n            ingredients={\"\"}\n            onChangeGoodness={onChangeGoodness(products.length)}\n            onChangeTitle={onChangeTitle(products.length)}\n            onChangeIngredients={onChangeIngredients(products.length)}\n          />\n        </div>\n        <Results products={products} />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n\nfunction saveState(state: Product[]) {\n  localStorage.setItem('ingredients-state', JSON.stringify(state))\n}\n\nfunction loadState(): Product[] {\n  const saved = localStorage.getItem('ingredients-state')\n  return saved ? JSON.parse(saved) : []\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
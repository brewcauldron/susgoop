{"version":3,"sources":["Product.tsx","Results.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Product","onChangeGoodness","onChangeTitle","onChangeIngredients","good","title","ingredients","className","type","checked","onChange","e","value","target","autoFocus","placeholder","EmptyProduct","Results","products","goods","bads","product","split","ingredient","toLowerCase","trim","prev","push","badIngredients","length","map","i","savedState","saved","localStorage","getItem","JSON","parse","loadState","App","React","useState","setProducts","idx","next","saveState","p","state","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fde50116.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Product.css'\r\n\r\nexport type Product = {good: boolean, title: string, ingredients: string}\r\n\r\nexport type Props = Product & {\r\n  onChangeGoodness: (goodness: boolean) => void\r\n  onChangeTitle: (title: string) => void\r\n  onChangeIngredients: (ingredients: string) => void\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport function Product({onChangeGoodness, onChangeTitle, onChangeIngredients, good, title, ingredients}: Props) {\r\n  return (\r\n    <div key=\"Product\" className=\"row padding\">\r\n      <input key=\"Good\" className=\"margin\" type={\"checkbox\"} checked={good} onChange={e => onChangeGoodness(!good)} />\r\n      <input key=\"Name\" className=\"right-margin subtitle\" value={title} onChange={e => onChangeTitle(e.target.value)} autoFocus={false} placeholder={\"Product name\"} />\r\n      <input key=\"Ingredients\" className=\"grow body\" value={ingredients} onChange={e => onChangeIngredients(e.target.value)} autoFocus={false} placeholder={\"Enter the ingredients separated by commas\"} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const EmptyProduct: Product = {\r\n  good: false,\r\n  title: '',\r\n  ingredients: ''\r\n}\r\n","import React from 'react'\r\nimport {Product} from './Product'\r\nimport './Results.css'\r\n\r\nexport type Props = {\r\n  products: Product[]\r\n}\r\n\r\nexport function Results({products}: Props) {\r\n  const goods: {[ingredient: string]: Product[]} = {}\r\n  const bads: {[ingredient: string]: Product[]} = {}\r\n  for (const product of products) {\r\n    const ingredients = product.ingredients.split(',')\r\n    for (const ingredientUnsanitized of ingredients) {\r\n      const ingredient = ingredientUnsanitized.toLowerCase().trim()\r\n      if (product.good) {\r\n        const prev = goods[ingredient]\r\n        if (prev) {\r\n          prev.push(product)\r\n        } else  {\r\n          goods[ingredient] = [product]\r\n        }\r\n      } else {\r\n        const prev = bads[ingredient]\r\n        if (prev) {\r\n          prev.push(product)\r\n        } else  {\r\n          bads[ingredient] = [product]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const badIngredients: string[] = []\r\n  for (const ingredient in bads) {\r\n    if (!goods[ingredient]) {\r\n      badIngredients.push(ingredient)\r\n    }\r\n  }\r\n\r\n  return <>\r\n    <div key=\"title\" className=\"ResultsTitle\">{badIngredients.length} Sus Ingredients:</div>\r\n    {badIngredients.map(i => <div className=\"ResultsIngredient\" key={i}>{i}</div>)}\r\n  </>\r\n}","import React from 'react'\r\nimport './App.css'\r\nimport {Product, EmptyProduct} from './Product'\r\nimport {Results} from './Results'\r\n\r\nconst savedState = loadState()\r\n\r\nfunction App() {\r\n  const [products, setProducts] = React.useState(savedState)\r\n\r\n  const onChangeGoodness = (idx: number) => {\r\n    return (good: boolean) => {\r\n      const next = [...products]\r\n      next[idx] = {\r\n        ...products[idx] ?? EmptyProduct,\r\n        good\r\n      }\r\n      setProducts(next)\r\n      saveState(next)\r\n    }\r\n  }\r\n\r\n  const onChangeTitle = (idx: number) => {\r\n    return (title: string) => {\r\n      const next = [...products]\r\n      next[idx] = {\r\n        ...products[idx] ?? EmptyProduct,\r\n        title\r\n      }\r\n      setProducts(next)\r\n      saveState(next)\r\n    }\r\n  }\r\n\r\n  const onChangeIngredients = (idx: number) => {\r\n    return (ingredients: string) => {\r\n      const next = [...products]\r\n      next[idx] = {\r\n        ...products[idx] ?? EmptyProduct,\r\n        ingredients\r\n      }\r\n      setProducts(next)\r\n      saveState(next)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"app-header\">\r\n        <div className=\"app-name hero left\">Which skincare ingredients may I be sensitive to?</div>\r\n        <span className=\"left top subtitle align-start\">Products Iâ€™ve had issues with:</span>\r\n        <div className=\"padding column\">\r\n          {products.map((p, i) => (\r\n            <Product\r\n              key={i}\r\n              {...p}\r\n              onChangeGoodness={onChangeGoodness(i)}\r\n              onChangeTitle={onChangeTitle(i)}\r\n              onChangeIngredients={onChangeIngredients(i)}\r\n            />\r\n          ))}\r\n          <Product\r\n            key={products.length}\r\n            good={false}\r\n            title={\"\"}\r\n            ingredients={\"\"}\r\n            onChangeGoodness={onChangeGoodness(products.length)}\r\n            onChangeTitle={onChangeTitle(products.length)}\r\n            onChangeIngredients={onChangeIngredients(products.length)}\r\n          />\r\n        </div>\r\n        <Results products={products} />\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\nfunction saveState(state: Product[]) {\r\n  localStorage.setItem('ingredients-state', JSON.stringify(state))\r\n}\r\n\r\nfunction loadState(): Product[] {\r\n  const saved = localStorage.getItem('ingredients-state')\r\n  return saved ? JSON.parse(saved) : []\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
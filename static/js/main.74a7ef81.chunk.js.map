{"version":3,"sources":["Product.tsx","Results.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Product","onChangeGoodness","onChangeTitle","onChangeIngredients","good","title","ingredients","className","type","checked","onChange","e","value","target","autoFocus","placeholder","EmptyProduct","Results","products","goods","bads","product","split","ingredient","toLowerCase","prev","push","badIngredients","length","map","i","savedState","saved","localStorage","getItem","JSON","parse","loadState","App","React","useState","setProducts","idx","next","saveState","p","state","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74a7ef81.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Product.css'\r\n\r\nexport type Product = {good: boolean, title: string, ingredients: string}\r\n\r\nexport type Props = Product & {\r\n  onChangeGoodness: (goodness: boolean) => void\r\n  onChangeTitle: (title: string) => void\r\n  onChangeIngredients: (ingredients: string) => void\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport function Product({onChangeGoodness, onChangeTitle, onChangeIngredients, good, title, ingredients}: Props) {\r\n  return (\r\n    <div key=\"Product\" className=\"Product\">\r\n      <input key=\"Good\" className=\"Goodness\" type={\"checkbox\"} checked={good} onChange={e => onChangeGoodness(!good)} />\r\n      <input key=\"Title\" className=\"IngredientTitle\" value={title} onChange={e => onChangeTitle(e.target.value)} autoFocus={false} placeholder={\"Title\"} />\r\n      <input key=\"Ingredients\" className=\"Ingredients\" value={ingredients} onChange={e => onChangeIngredients(e.target.value)} autoFocus={false} placeholder={\"Ingredients separated by comma\"} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const EmptyProduct: Product = {\r\n  good: false,\r\n  title: '',\r\n  ingredients: ''\r\n}\r\n","import React from 'react'\r\nimport {Product} from './Product'\r\nimport './Results.css'\r\n\r\nexport type Props = {\r\n  products: Product[]\r\n}\r\n\r\nexport function Results({products}: Props) {\r\n  const goods: {[ingredient: string]: Product[]} = {}\r\n  const bads: {[ingredient: string]: Product[]} = {}\r\n  for (const product of products) {\r\n    const ingredients = product.ingredients.split(',')\r\n    for (const ingredientUnsanitized of ingredients) {\r\n      const ingredient = ingredientUnsanitized.toLowerCase()\r\n      if (product.good) {\r\n        const prev = goods[ingredient]\r\n        if (prev) {\r\n          prev.push(product)\r\n        } else  {\r\n          goods[ingredient] = [product]\r\n        }\r\n      } else {\r\n        const prev = bads[ingredient]\r\n        if (prev) {\r\n          prev.push(product)\r\n        } else  {\r\n          bads[ingredient] = [product]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const badIngredients: string[] = []\r\n  for (const ingredient in bads) {\r\n    if (!goods[ingredient]) {\r\n      badIngredients.push(ingredient)\r\n    }\r\n  }\r\n\r\n  return <>\r\n    <div key=\"title\" className=\"ResultsTitle\">{badIngredients.length} Sus Ingredients:</div>\r\n    {badIngredients.map(i => <div className=\"ResultsIngredient\" key={i}>{i}</div>)}\r\n  </>\r\n}","import React from 'react'\nimport './App.css'\nimport {Product, EmptyProduct} from './Product'\nimport {Results} from './Results'\n\nconst savedState = loadState()\n\nfunction App() {\n  const [products, setProducts] = React.useState(savedState)\n\n  const onChangeGoodness = (idx: number) => {\n    return (good: boolean) => {\n      const next = [...products]\n      next[idx] = {\n        ...products[idx] ?? EmptyProduct,\n        good\n      }\n      setProducts(next)\n      saveState(next)\n    }\n  }\n\n  const onChangeTitle = (idx: number) => {\n    return (title: string) => {\n      const next = [...products]\n      next[idx] = {\n        ...products[idx] ?? EmptyProduct,\n        title\n      }\n      setProducts(next)\n      saveState(next)\n    }\n  }\n\n  const onChangeIngredients = (idx: number) => {\n    return (ingredients: string) => {\n      const next = [...products]\n      next[idx] = {\n        ...products[idx] ?? EmptyProduct,\n        ingredients\n      }\n      setProducts(next)\n      saveState(next)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"Title\">SusGoop</div>\n        <span className=\"ColumnHeader\">\n          <span className=\"ColumnHeaderTitle\">Good?</span>\n        </span>\n        <div className=\"Products\">\n          {products.map((p, i) => (\n            <Product\n              key={i}\n              {...p}\n              onChangeGoodness={onChangeGoodness(i)}\n              onChangeTitle={onChangeTitle(i)}\n              onChangeIngredients={onChangeIngredients(i)}\n            />\n          ))}\n          <Product\n            key={products.length}\n            good={false}\n            title={\"\"}\n            ingredients={\"\"}\n            onChangeGoodness={onChangeGoodness(products.length)}\n            onChangeTitle={onChangeTitle(products.length)}\n            onChangeIngredients={onChangeIngredients(products.length)}\n          />\n        </div>\n        <Results products={products} />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n\nfunction saveState(state: Product[]) {\n  localStorage.setItem('ingredients-state', JSON.stringify(state))\n}\n\nfunction loadState(): Product[] {\n  const saved = localStorage.getItem('ingredients-state')\n  return saved ? JSON.parse(saved) : []\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}